{
	"info": {
		"_postman_id": "5c2752f0-58cc-44f5-bda5-aa1e83bb05e7",
		"name": "Grup_31",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15229760"
	},
	"item": [
		{
			"name": "/login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var resp_token = jsonData.token\r",
							"pm.environment.set(\"token\", resp_token); \r",
							"pm.environment.set(\"token\", resp_token); \r",
							"pm.environment.set(\"token\", resp_token); \r",
							"pm.environment.set(\"token\", resp_token); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "MilanaMir",
							"type": "text"
						},
						{
							"key": "password",
							"value": "123456",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{URL}}/login",
					"host": [
						"{{URL}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/first",
					"host": [
						"{{URL}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var jsonData = pm.response.json();\r",
							"//  Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql('Milla');\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Your test age\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.age).to.eql('35');\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Your test salary\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.salary).to.eql(2000);\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"var jsonData = pm.response.json();\r",
							"let req = request.data\r",
							"let req_salary = +req.salary\r",
							"\r",
							"console.log(\"req_salary= \"+ typeof req_salary)\r",
							"console.log(\"resp_salary= \" +typeof jsonData.salary)\r",
							"\r",
							"pm.test(\"Your test salary2\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req.name\r",
							"pm.test(\"Your test name 2\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let req_age = req.age\r",
							"pm.test(\"Your test age 2\", function () {\r",
							"    var respAge = pm.response.json();\r",
							"    pm.expect(respAge.age).to.eql(req_age)\r",
							"})\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"pm.test(\"Your test family\", function () {\r",
							"    var respFam = pm.response.json();\r",
							"   console.log(\"family;\",respFam.family)\r",
							"})\r",
							"\r",
							"\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let req_salary_1_5_year = req.salary * 4\r",
							"pm.test(\"Your test salary_1_5_year\", function () { \r",
							"    var jsonData = pm.response.json(); \r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req_salary_1_5_year)\r",
							"})\r",
							"\r",
							"\r",
							"console.log(\"salary_1_5_year;\",jsonData.family.u_salary_1_5_year)\r",
							"console.log(\"salary * 4 \",req_salary_1_5_year)\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Milla",
							"type": "text"
						},
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{URL}}/user_info_3",
					"host": [
						"{{URL}}"
					],
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "salary",
							"value": "2000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"pm.environment.set(\"salary\", 1000);\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"pm.environment.set(\"age\", 35)\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"pm.environment.set(\"name\", 'Milana')\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"const requestData = pm.request.url.query.toObject()\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Your start_qa_salary\", function () {\r",
							"     pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"})\r",
							"console.log(\"Your start_qa_salary;\",jsonData.start_qa_salary)\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Your qa_salary_after_6_months\", function () {\r",
							"     pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"})\r",
							"console.log(\"qa_salary_after_6_months\",jsonData.qa_salary_after_6_months)\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Your qa_salary_after_12_months\", function () {\r",
							"     pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"})\r",
							"console.log(\"qa_salary_after_12_months\",jsonData.qa_salary_after_12_months)\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Your qa_salary_after_1.5_year\", function () {\r",
							"     pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"})\r",
							"// console.log(\"qa_salary_after_1.5_year\", jsonData.qa_salary_after_1.5_year)\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Your qa_salary_after_3.5_years\", function () {\r",
							"     pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"})\r",
							"// console.log(\"qa_salary_after_3.5_years\",jsonData.qa_salary_after_3.5_years)\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Your test person\", function () {\r",
							"     pm.expect(jsonData).to.have.property(\"person\");\r",
							"})\r",
							"console.log(\"person\",jsonData.person)\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"let REQDATA = request.data\r",
							"pm.test(\"Your test start_qa_salary\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+REQDATA.salary);\r",
							"});\r",
							"console.log(\"Your test start_qa_salary = \", REQDATA.salary)\r",
							"// =================================================================================\r",
							"\r",
							"// // 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"let REQDATA1 = request.data\r",
							"pm.test(\"Your test qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(REQDATA1.salary*2);\r",
							"});\r",
							"console.log(\"qa_salary_after_6_months = \", jsonData.qa_salary_after_6_months)\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"let REQDATA2 = request.data\r",
							"pm.test(\"Your test qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(REQDATA2.salary*2.7);\r",
							"});\r",
							"console.log(\"qa_salary_after_12_months = \", jsonData.qa_salary_after_12_months)\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"let REQDATA3 = request.data\r",
							"pm.test(\"Your test qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(REQDATA3.salary*3.3);\r",
							"});\r",
							"console.log(\"qa_salary_after_1.5_months = \", jsonData[\"qa_salary_after_1.5_years\"])\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"let REQDATA4 = request.data\r",
							"pm.test(\"Your test qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(REQDATA4.salary*3.8);\r",
							"});\r",
							"console.log(\"qa_salary_after_3.5_months = \", jsonData[\"qa_salary_after_3.5_years\"])\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Your test person\", function () {\r",
							"     pm.expect(jsonData.person.u_name[1]).to.eql(+REQDATA4.salary);\r",
							"})\r",
							"console.log(\"person\",jsonData.person.u_name[1])\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"let REQDATA5 = request.data\r",
							"pm.test(\"Your test person_age\", function () {\r",
							"     pm.expect(jsonData.person.u_age).to.eql(+REQDATA5.age);\r",
							"})\r",
							"console.log(\"Your test person_age\",jsonData.person.u_age)\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Your test u_salary_5_years\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(+REQDATA5.salary*4.2);\r",
							"});\r",
							"console.log(\"u_salary_5_years = \", jsonData.person.u_salary_5_years)\r",
							"\r",
							"// =======================================================================\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"let response = pm.response.json()\r",
							"for (i in response.person) {console.log(i)}\r",
							"console.log(\"Person_1 =\", jsonData.person.u_age)\r",
							"console.log(\"Person_2 =\", jsonData.person.u_name)\r",
							"console.log(\"Person_1 =\", jsonData.person.u_salary_5_years)\r",
							"// ==============================================================\r",
							"for (item in response.salary){\r",
							"    console.log(response.salary[item])\r",
							"}\r",
							" \r",
							"// for (let i = 0; i < response.salary.length; i++){\r",
							"//     console.log(response.salary[i])\r",
							"// } \r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "200",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{URL}}/user_info_2",
					"host": [
						"{{URL}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_1",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/object_info_1?name=Milla&age=35&weight=70",
					"host": [
						"{{URL}}"
					],
					"path": [
						"object_info_1"
					],
					"query": [
						{
							"key": "name",
							"value": "Milla"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "weight",
							"value": "70"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"const requestData = pm.request.url.query.toObject()\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Your start_qa_salary\", function () {\r",
							"     pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"})\r",
							"console.log(\"start_qa_salary;\",jsonData.start_qa_salary)\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Your qa_salary_after_6_months\", function () {\r",
							"     pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"})\r",
							"console.log(\"qa_salary_after_6_months\",jsonData.qa_salary_after_6_months)\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Your qa_salary_after_12_months\", function () {\r",
							"     pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"})\r",
							"console.log(\"qa_salary_after_12_months\",jsonData.qa_salary_after_12_months)\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Your qa_salary_after_1.5_year\", function () {\r",
							"     pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"})\r",
							"// console.log(\"qa_salary_after_1.5_year\", jsonData.qa_salary_after_1.5_year)\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Your qa_salary_after_3.5_years\", function () {\r",
							"     pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"})\r",
							"// console.log(\"qa_salary_after_3.5_years\",jsonData.qa_salary_after_3.5_years)\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Your test person\", function () {\r",
							"     pm.expect(jsonData).to.have.property(\"person\");\r",
							"})\r",
							"console.log(\"person\",jsonData.person)\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let req_salary = +requestData.salary\r",
							"pm.test(\"Your test start_qa_salary\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(req_salary);\r",
							"});\r",
							"console.log(\"start_qa_salary = \", req_salary)\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"let req_salary1 = requestData.salary\r",
							"pm.test(\"Your test qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(req_salary1*2);\r",
							"});\r",
							"console.log(\"qa_salary_after_6_months = \", jsonData.qa_salary_after_6_months)\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"let req_salary12 = requestData.salary\r",
							"pm.test(\"Your test qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(req_salary12*2.7);\r",
							"});\r",
							"console.log(\"qa_salary_after_12_months = \", jsonData.qa_salary_after_12_months)\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"let req_salary15 = requestData.salary\r",
							"pm.test(\"Your test qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(req_salary15*3.3);\r",
							"});\r",
							"console.log(\"qa_salary_after_1.5_months = \", jsonData[\"qa_salary_after_1.5_years\"])\r",
							"\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"let req_salary4 = requestData.salary\r",
							"pm.test(\"Your test qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(req_salary4*3.8);\r",
							"});\r",
							"console.log(\"qa_salary_after_3.5_months = \", jsonData[\"qa_salary_after_3.5_years\"])\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Your test person\", function () {\r",
							"     pm.expect(jsonData.person.u_name[1]).to.eql(req_salary);\r",
							"})\r",
							"console.log(\"person\",jsonData.person.u_name[1])\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Your test person\", function () {\r",
							"     pm.expect(jsonData.person.age).to.eql(req_salary.age);\r",
							"})\r",
							"console.log(\"person\",jsonData.person.age)\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Your test u_salary_5_years\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(req_salary*4.2);\r",
							"});\r",
							"console.log(\"u_salary_5_years = \", jsonData.person.u_salary_5_years)\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"let response = pm.response.json()\r",
							"for (i in response.person) {console.log(i)}\r",
							"console.log(\"Person_1 =\", jsonData.person.u_age)\r",
							"console.log(\"Person_2 =\", jsonData.person.u_name)\r",
							"console.log(\"Person_1 =\", jsonData.person.u_salary_5_years)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/object_info_2?name={{name}}&age={{age}}&salary=7000",
					"host": [
						"{{URL}}"
					],
					"path": [
						"object_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "7000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							" //Спарсить request.\r",
							"const requestData = pm.request.url.query.toObject()\r",
							"\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)(Спаршенный request выше, использовать обязательно )\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(requestData.name);\r",
							"});\r",
							"console.log(\"req_name= \", requestData.name)\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.) (Спаршенный request выше, использовать обязательно )\r",
							"pm.test(\"Your test age\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.age).to.eql(requestData.age);\r",
							"});\r",
							"console.log(\"req_age= \", requestData.age)\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.) (Спаршенный request выше, использовать обязательно )\r",
							"var jsonData = pm.response.json();\r",
							"//let req = requestData.salary\r",
							"let req_salary = +requestData.salary\r",
							"\r",
							"pm.test(\"Your test salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(req_salary);\r",
							"});\r",
							"console.log(\"req_salary= \", req_salary)\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"pm.test(\"Your test family\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"   console.log(\"family;\",jsonData.family)\r",
							"})\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Your test dog_name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"     pm.expect(jsonData.family.pets.dog).to.have.property('name');\r",
							"   console.log(\"dog_name;\",jsonData.family.pets.dog.name)\r",
							"})\r",
							"\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Your test dog_age\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"     pm.expect(jsonData.family.pets.dog).to.have.property('age');\r",
							"   console.log(\"dog_age;\",jsonData.family.pets.dog.age)\r",
							"})\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Your test dog_name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"})\r",
							"\r",
							"// Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Your test dog_age\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/object_info_3?name=Anna&age=30&salary=100",
					"host": [
						"{{URL}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Anna"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 4. Спарсить request.\r",
							"const requestData = pm.request.url.query.toObject()\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							" var jsonData = pm.response.json();\r",
							"    \r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(requestData.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Your test age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(+requestData.age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"requst_salary = \", requestData.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(\"respons_salary = \", jsonData.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.(1вариант)\r",
							"let resp = jsonData.salary\r",
							"let resp_salary0 = resp[0]\r",
							"console.log(\"resp_salary0 = \", resp_salary0)\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response. (2вариант)\r",
							"\r",
							"console.log(\"resp_salary1 = \", +jsonData.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.(3вариант)\r",
							"let resp_salary2 = +resp[2]\r",
							"console.log(\"resp_salary2= \", resp_salary2)\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"// 1вариант\r",
							"pm.test(\"Your test 0 param\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(resp_salary0);\r",
							"});\r",
							"// 2 вариант\r",
							"pm.test(\"Your test 0 param\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+requestData.salary);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Your test 1 salary param\", function () {\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(requestData.salary*2);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Your test 1 salary param\", function () {\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(requestData.salary*3);\r",
							"});\r",
							"// 15 Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"\r",
							"var resp_name = jsonData.name\r",
							"pm.environment.set(\"name\", resp_name); \r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"var resp_age = jsonData.age\r",
							"pm.environment.set(\"age\", resp_age); \r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"var resp_salary = jsonData.salary\r",
							"pm.environment.set(\"salary\", resp_salary); \r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"let response = pm.response.json()\r",
							"for (i in response.salary) {console.log(i)}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/object_info_4?name=Anastasiy&age=20&salary=1000",
					"host": [
						"{{URL}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Anastasiy"
						},
						{
							"key": "age",
							"value": "20"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/get_method",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/get_method?name=Milla&age=35",
					"host": [
						"{{URL}}"
					],
					"path": [
						"get_method"
					],
					"query": [
						{
							"key": "name",
							"value": "Milla"
						},
						{
							"key": "age",
							"value": "35"
						}
					]
				}
			},
			"response": []
		}
	]
}